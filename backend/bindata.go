// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// static/index.html
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x57\x6d\x6f\x1b\xb9\x11\xfe\x2c\xfd\x8a\x09\x95\x54\x32\x2c\x69\xe5\x9c\xdd\x1a\xab\xd5\x02\xa9\x7d\x87\x16\x28\x7a\x45\x9d\xfb\xd0\x06\x41\x8e\x5a\x8e\x24\xc6\x14\xb9\x20\xa9\x17\xc7\xf1\x7f\x2f\x86\xdc\x5d\x6b\x25\xd7\x39\x18\x89\x86\x9c\x99\x87\xf3\x4e\x6e\x37\x7b\x73\xfb\xeb\xcd\xc7\xff\xfc\xeb\x67\x58\xf9\xb5\xca\xbb\x59\xfd\x83\x5c\xe4\xdd\x4e\xe6\xa5\x57\x98\xdf\xde\xfd\x92\x25\x91\xec\x76\x32\x57\x58\x59\x7a\xf0\x0f\x25\xce\x98\xc7\xbd\x4f\xbe\xf2\x2d\x8f\xbb\x0c\x9c\x2d\x66\x2c\x49\x0a\xa1\xc7\x3b\x9c\xcb\xfd\xb8\x30\xeb\x04\xc5\x12\x93\xb8\xfc\xea\x58\x9e\x25\x51\x9a\xd0\x94\xd4\xf7\x60\x51\xcd\x98\xf3\x0f\x0a\xdd\x0a\xd1\xb3\x43\xf0\xc2\x39\x06\x2b\x8b\x8b\x57\x61\x49\x2a\x18\x47\x20\xc7\xea\x79\xb7\xd3\x89\x6a\x5f\x84\x35\xe5\x97\x85\x54\x08\x8f\xdd\x4e\xa7\x33\xe7\xc5\xfd\xd2\x9a\x8d\x16\x29\xf4\x16\xe2\x7a\xda\xed\x74\x9e\x5e\x90\x4e\xe7\xb8\x30\x16\xa3\x8e\xf1\xde\xac\x53\xbe\xf1\x86\xc4\x3b\xde\x94\xe9\xe5\x9f\xdf\x05\xba\x34\x52\x7b\xb4\x23\xdc\xa2\xf6\x2e\x05\x6d\x34\x36\x98\x9a\xaf\xf1\x4b\xc9\xad\x0f\x30\x42\xba\x52\xf1\x87\x54\x6a\x25\x35\x8e\xe6\xca\x14\xf7\x53\x20\xce\x4e\x0a\xbf\x4a\xe1\xfd\x64\x52\xee\x1b\xe5\xd2\x9a\xa5\x45\xe7\x4e\x01\xa0\x85\x40\x9c\x35\xb7\x4b\xa9\x47\x0a\x17\x3e\x7d\xff\x53\x04\x39\x42\xad\x61\x0b\x6e\xc5\xe3\xb3\x4e\x7a\x71\x5d\xee\xe1\x6a\x52\xee\xe1\x7d\x45\x44\xbf\xb8\x10\x52\x2f\x53\xb8\x08\x2c\xfa\xaf\xa1\xa6\x31\x28\x56\xa0\x4d\xe1\xa2\xdc\x83\x33\x4a\x0a\xe8\x09\x21\xa6\xa7\x31\xbe\xa6\xbf\x4a\x65\x3f\x72\x2b\x2e\xcc\x2e\x85\x2b\x3a\xac\xfa\xe7\xa4\xda\xa2\x3d\x40\x1d\x59\x2e\xe4\xc6\xa5\xf0\xd3\x41\x3c\x62\x82\x94\x74\xfe\x8b\xf4\xb8\x7e\x3c\x10\xaf\x12\x04\x93\xc6\x16\x8b\xa2\xe5\xc6\x24\xac\xcc\xc6\x53\xe0\x62\x96\xe0\x8d\x5c\x97\xc6\x7a\xae\x7d\x60\x16\x1b\xeb\x8c\x4d\x41\xe0\x82\x6f\x94\xaf\xcf\x9d\x6f\xbc\x37\xfa\xf1\x07\x2e\x37\xe1\x7a\x5f\x05\xea\x25\x6f\xae\xab\xed\xfa\xa4\xaa\x76\x4e\x63\x56\xa3\x16\x46\x91\x5c\xef\xf2\xf2\xf2\x30\xcd\x56\x2e\x57\x3e\x6d\x8e\x79\xb6\x32\x5d\x99\x2d\xda\xd3\x3a\x17\xd7\xf4\xd7\x82\x9c\x4c\x26\x47\xba\xbc\xf0\x72\x8b\xa7\xca\x88\xf8\xff\x34\xc7\x0e\xed\x16\x2d\xbc\x52\xab\xad\x7e\x28\x94\x44\xed\x61\x4c\xcd\xfd\xaa\x68\x96\x84\xb6\xce\xbb\x59\x12\x07\x53\x36\x37\xe2\xe1\x87\xb3\x88\xda\x7e\xb1\xd1\x85\x97\x46\x03\x75\xf1\xc7\x87\x12\x07\x24\x7b\x16\x4e\x22\x0a\x66\x10\x76\xe0\xfb\x77\x60\xec\x6c\xec\xcd\x3f\xcc\x0e\xed\x0d\x77\x38\x38\x0b\x6d\xd2\x71\x3b\xe9\x8b\xd5\x81\x5e\xa7\xe0\x0e\x81\xd1\xa8\x64\x69\x7b\xa3\xb5\xfe\xea\x5a\x4b\x9a\x44\x87\x6b\xdf\x5e\x2a\x74\xc7\xf2\xad\x65\xb9\x2a\xdb\xe8\x7c\xcb\xab\x8d\x8e\x45\xbf\xb1\x1a\x18\x39\x39\x2a\x8c\xc0\x91\x61\xd1\xf8\x4a\xf8\x9b\x6c\x2b\x5b\x6e\x5b\xeb\x6f\x7f\x79\x11\x8a\xdb\x62\x25\xb7\x27\x68\x5f\xcb\x65\xdb\x34\xdd\x5e\x2f\xe5\xa2\x6d\x6a\x89\xcb\x3f\x86\x5f\x75\xdb\x4b\xb2\x24\xd3\x89\x95\xf3\xd4\x3d\xcc\xac\x37\x37\x4a\x96\x73\xc3\xad\x18\x68\x23\xaa\x24\x11\x05\x33\xa0\x9f\xb1\xc6\xbd\xbf\x93\x73\x25\xf5\x32\x9e\xb3\xe5\x16\x2c\xd7\x4b\x92\x10\xa6\xd8\xac\x51\xfb\x71\x61\x91\x7b\xfc\x37\x6d\x53\xea\xe9\x7c\xa2\xc7\x0e\x15\x16\xfe\x9f\x46\x60\x84\xaf\xa6\xa9\x16\x66\x37\x5e\xa2\xbf\x0b\x6c\x69\xf4\xe0\x6c\x6c\x71\x6d\xb6\xf8\x41\xa9\x80\xe2\x06\xaf\xc9\x72\x21\xe2\x59\xe1\x94\x28\xd9\xd8\x82\x7b\x2c\x6e\xcc\x7a\xcd\xb5\x18\xf4\x0b\x53\x3e\xf4\xcf\xa6\xb5\xe3\x64\x3c\xb5\x01\x5a\x98\xc1\x23\x6c\x25\xee\x52\xe6\x8d\x51\x73\x6e\xd9\x10\x0a\xa3\x5c\xfa\x89\xd0\x6a\x9e\xe2\x73\x54\x6c\x08\xe1\x37\x65\xb7\xc8\x05\xdc\xc9\x75\xa9\x10\x7e\xa1\x9b\xf0\xce\x1b\xcb\x97\xc8\x86\xb0\xc2\x30\x4b\x2e\x27\xf0\x34\x0c\x08\x21\x0f\x11\x65\x53\x2a\x43\x87\xb2\x21\x48\x91\x86\x9c\x38\x36\x84\x2d\x57\x1b\x4c\xd9\x07\x21\x02\x18\x1b\x42\xbc\x68\x2e\xae\x26\x43\x88\x3a\x29\x4b\x22\xc1\xea\x04\x7e\x7e\x9a\x56\x8e\x50\x23\x93\x1b\xdd\xe6\x1c\x1a\xe9\xd5\x19\x15\x29\xb8\xe7\xe9\xa7\xcf\xc1\x22\xa3\x6f\x94\x2c\xee\xd3\x68\x19\x2b\xea\xcc\xb3\xb4\xae\x87\x01\x6e\x49\x7b\x08\xcf\xb5\x40\x77\xf4\x51\x8d\x84\x70\x07\x5b\x3a\xd1\x55\x6a\xef\x0a\xb5\x8a\xc2\xc5\xe4\x2a\x70\x3a\x1e\xd7\xa5\xe2\x1e\xd3\xdf\x69\x99\x09\xb9\x85\x42\x71\xe7\x66\x7d\xba\x3d\xfb\x79\x10\xa2\xed\x3c\x73\x25\xd7\x35\x33\xde\x50\xb2\xa0\xe1\xc3\x47\x3d\x22\x7a\xfd\xfc\x4f\x7a\xee\xca\x69\x96\x90\x64\x0e\xd9\xbc\x96\x6e\x1e\x07\xfd\xbc\x47\x74\x2f\x4b\xe6\x6d\x3c\x27\xbf\x35\x12\x44\xf7\x2a\x90\x2c\xa1\xa3\x1b\x23\x6a\xf1\x9e\xf3\xdc\x6f\x5c\xaf\xdf\x46\x69\xcd\xe6\x7e\xfe\x5b\x48\x4c\xb8\xab\x7a\x25\xda\x02\xb5\xef\xbd\xab\x81\x0f\xf5\x9a\x21\xdd\xcf\xb3\x78\x45\x34\x41\xa8\x23\xdb\xcf\x3f\x1a\x68\x56\x59\x12\xc5\xf2\x1e\xa9\x9e\x1a\xfb\x4c\xfd\x0e\xa1\xa9\x29\x25\xf1\x31\xb7\x91\x83\x90\x09\x6b\x76\x2e\xfd\x54\x15\xfb\x30\xd6\xca\x67\x12\x8d\x93\xf9\xed\xdb\x41\x55\x86\xa1\x9b\x6e\xad\x29\xff\x6b\x34\x0e\x68\x3f\x94\xce\xd9\xf8\x2d\xd5\x54\x48\x76\x4b\xd8\x7b\x5e\xac\x7e\xa6\x37\xda\x80\x19\xfd\x61\xe1\xd1\x52\xf1\x7e\x10\x82\x0d\xa1\x29\x24\x12\x8f\x05\x74\x80\xb8\x92\x02\x7f\xdd\xa2\x55\xfc\xa1\x6a\xef\x03\x26\x17\x22\x5a\xde\x91\x22\x05\x08\x97\xce\x58\x8a\x58\x46\x94\xd5\x34\x6e\x11\x19\x37\x29\x91\xd5\x26\x91\x74\x85\x45\x06\x95\x4b\xfa\x7c\x6b\x05\x89\x70\x05\x45\x76\x95\xab\x14\x26\x71\x4d\x31\x4e\x19\xab\x40\x43\xe6\x53\x16\x2f\xd8\xd8\x75\xc1\x56\x78\xfa\x51\x2c\x28\x0c\xb1\x26\x5e\x8e\x04\xf5\x6c\xc9\xfd\x0a\x66\xa0\x4c\xc1\x89\x4b\xd7\xbd\x37\x85\x51\xe7\x2c\x49\xd8\x79\xb3\xbd\x32\xce\x9f\x07\xbb\x49\xe1\x38\x54\x9b\x52\x70\x8f\x7f\xf7\xb8\x1e\xd4\x51\x82\xc7\x03\x57\x32\x0e\x9e\xdb\x25\xfa\x59\x7f\xae\xb8\xbe\xef\xc7\x6f\x80\x3e\x3b\x27\xb4\x73\xd6\xcf\x6b\x2a\x4b\x78\x7e\xe4\x78\x7c\x88\x1c\x38\x5e\x15\x96\x40\x4a\x5b\xe3\x56\x35\x1d\xfc\x4a\xba\x71\x88\x47\x35\xc0\x6b\x8b\xa2\xea\xd3\x10\x48\x22\x0e\xe0\xd3\xca\x8b\x8a\x34\xa3\x8e\x63\x79\xcb\x3d\xff\x2d\xb8\x79\x18\x4b\x72\x94\xa4\x4f\x2a\xeb\x20\x22\x21\x18\xd0\xe4\x38\x80\x57\xab\x2a\x85\x95\x21\x10\xfd\xc2\xbd\x47\x2d\x0e\x0a\x7f\x58\x31\xaa\x4a\xfd\xab\xd9\xc7\xfc\xcb\x05\x0c\xde\x1c\x9c\x59\x98\x8d\xf6\x83\xb3\xb3\x23\x53\xdc\xca\xec\xea\x22\x67\x61\xa8\x84\x07\xd8\xac\xff\xe2\xf7\x4d\x3d\xf1\x27\x93\x77\x53\x28\x8d\x93\xe4\x67\xca\xe7\xce\xa8\x8d\xc7\x29\xd0\x07\xd2\x15\xf1\x16\x46\xfb\x51\xa8\xf8\x4b\x7a\xac\x42\xf5\x80\x25\x3e\x8c\xc2\x56\x3f\xa7\x2e\x8e\xd7\xd2\xdf\xd0\x62\x1c\x12\x8c\x9c\x0d\xcf\xc0\xea\xb3\x31\x4b\xe2\x03\x30\x4b\xc2\xf7\xea\xff\x02\x00\x00\xff\xff\x1f\xae\x62\x12\xc7\x0e\x00\x00")

func staticIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_staticIndexHtml,
		"static/index.html",
	)
}

func staticIndexHtml() (*asset, error) {
	bytes, err := staticIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/index.html", size: 3783, mode: os.FileMode(420), modTime: time.Unix(1552514206, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/index.html": staticIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{staticIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
